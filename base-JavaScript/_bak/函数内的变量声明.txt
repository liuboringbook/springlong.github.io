function foo(a){

	var a;

	function a(){
		alert(1);
	}

	var a = 1;

	return a;
}
foo('hello');


首先，我们需要知道在函数中通常会涉到的几个概念：
1. 参数；
2. 函数；
3. 变量；
4. 赋值；


接下来的操作顺序是这样的：
1. 每个函数中都有一个变量对象的概念来处理函数中的变量与变量声明。
2. 当函数执行时被传递过来的参数将优先保存到这个变量对象中。那么，变量对象的初始值为：{a: 'hello'}
3. 如果函数中存在函数声明，那么变量对象中将会添加这个成员，它的值就是该函数。如果之前的变量对象中已经存在同名的成员属性，那么原来的值将会被当前函数的值覆盖。此时，变量对象的值为：{a: function(){alert(1);}}
4. 如果函数中存在变量声明，那么变量对象中也会添加这个成员，它的值被设定为undefined。如果之前的变量对象中已经存在了同名的成员属性，那么原来的值将不会被覆盖。此时，变量对象的值依旧为：{a: function(){alert(1);}}
5. 上述的四个步骤，被称为变量声明的提升。而这些声明，在函数的代码执行中将不会再次参与。
6. 最后到了 a = 1 的赋值语句，最后变量对象的值被确定为：{a: 1}


对于同一变量的声明，它的最终值可以简单按照下面的优先级进行辨识：
1. 赋值操作
2. 函数声明
3. 参数传递
4. 变量声明（undefined）