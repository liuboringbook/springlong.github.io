<template>
  <view class="container">
    <view>欢迎进入wepy的世界！</view>
    <view class="row">
      <button open-type="getUserInfo" bindgetuserinfo="handleGetUserInfo">获取用户信息</button>
    </view>

    <PanelIntrol className="panel--index">
      <view slot="title">简介</view>
      <view slot="content">
        <view>姓名: {{name}}</view>
        <view>描述: {{desc}}</view>
      </view>
      <view>other text</view>
    </PanelIntrol>

    <PanelGood className="panel--index">
      <view slot="title">优势</view>
      <view slot="content">
        <view>组件化</view>
        <view>接近Vue的开发体验</view>
        <view>可以用npm包 </view>
      </view>
    </PanelGood>

    <!-- 原生循环方式 -->
    <view class="group-wrap" wx:for="{{list}}" wx:for-item="item" wx:for-index="index" wx:key="index">
      <view class="group-title">{{item.title}}</view>
      <view class="group-content">{{item.cont}}</view>
    </view>

    <!-- 组件循环方式 -->
    <!-- 注意，使用for属性，而不是使用wx:for属性 -->
    <repeat for="{{list}}" key="index" index="index" item="item">
      <Info :data="item" />
    </repeat>

    <view class="group-wrap">
      <view class="row">
        <navigator url="/pages/detail">navigate 跳转至详情页</navigator>
      </view>
      <view class="row">
        <button @tap="handleJumpToDetail">redirect 跳转至详情页</button>
      </view>
      <view class="row">
        <button @tap="handleTriggerBroadcast">父组件派发事件给子组件</button>
      </view>
      <view class="row">
        <button @tap="handleLoadMore">加载更多</button>
        <!-- 动态传值使用冒号(:)，加上.sync修饰符来达到父组件数据绑定至子组件的效果 -->
        <!-- 父组件传递给子组件的自定义事件，可以在子组件中通过$emit触发 -->
        <LoadMore
          message="加载中，请稍等..."
          :show.sync="isShowMore"
          @onLoad.user="handleLoadMoreLoad"
        />
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import mixinPublic from '../mixins/public'
  import Panel from '@/components/panel'
  import LoadMore from '@/components/loadMore'
  import Info from '@/components/info'

  export default class Index extends wepy.page {
    // 页面配置
    // 只在Page实例中存在的配置数据，对应于原生的page.json文件
    config = {
      navigationBarTitleText: '首页'
    }

    // 组件引用
    // 为了便于区分自定义组件，建议引用时采用首字母大写形式
    components = {
      PanelIntrol: Panel,
      PanelGood: Panel,
      LoadMore: LoadMore,
      Info: Info
    }

    // 混入
    mixins = [mixinPublic]

    // 组件数据
    data = {
      isShowMore: false,
      name: 'WePY',
      desc: '让小程序支持组件化开发的框架，一个最受欢迎的小程序框架.',
      list: [
        {
          title: '三体 （刘慈欣著科幻小说）',
          cont: '《三体》是刘慈欣创作的系列长篇科幻小说，由《三体》、《三体Ⅱ·黑暗森林》、《三体Ⅲ·死神永生》组成，第一部于2006年5月起在《科幻世界》杂志上连载，第二部于2008年5月首次出版，第三部则于2010年11月出版。'
        },
        {
          title: '星际迷航 （科幻影视系列作品）',
          cont: '《星际迷航》（Star Trek，又译作《星际旅行》等）是由美国派拉蒙影视制作的科幻影视系列，由6部电视剧、1部动画片、13部电影组成。该系列最初由编剧吉恩·罗登贝瑞（Gene Roddenberry）于20世纪60年代提出，经过近50年的不断发展而逐步完善，成为全世界最著名的科幻影视系列之一。'
        }
      ]
    }

    // 计算属性
    computed = {
      now () {
        return +new Date()
      }
    }

    // 监听器
    // 监听器函数名必须跟需要被监听的data对象中的属性num同名，
    // 其参数中的newValue为属性改变后的新值，oldValue为改变前的旧值
    watch = {
      isShowMore(newValue, oldValue) {
        console.log(`watch-isShowMore: ${oldValue} -> ${newValue}`)
      }
    }

    // 事件处理函数
    // 声明页面wxml中标签的事件处理函数。
    // 注意，此处只用于声明页面wxml中标签的bind、catch事件，
    // 自定义方法需以自定义方法的方式声明
    methods = {
      // 获取用户信息回调
      handleGetUserInfo(evt) {
        console.log('index handleGetUserInfo', evt.detail)

        // 保存用户信息
        // 在Page页面实例中，可以通过this.$parent来访问App实例。
        this.$parent.globalData.userInfo = evt.detail.userInfo
      },

      // 跳转至详情页
      handleJumpToDetail(id) {
        wx.redirectTo({ url: '/pages/detail' })
      },

      // 触发子组件定义的events
      handleTriggerBroadcast() {
        // 父组件派发事件给子组件，所有子组件都会收到此广播事件
        this.$broadcast('onChildEvent', {a: 1, b: 2})
      },

      // 点击加载更多
      handleLoadMore() {
        this.isShowMore = true
      },

      // 测试组件自定义事件处理函数
      handleLoadMoreLoad(info, evt) {
        console.log('methods-handleLoadMoreLoad', info, evt)
      }
    }

    // WePY组件间通信事件
    // 存放响应组件之间通过 $broadcast $emit $invoke 所传递的事件的函数
    //
    // 父组件定义的events事件，可以在子组件中通过$emit触发
    // 父组件传递给子组件的自定义事件，也可以在子组件中通过$emit触发
    // 在子组件中通过$emit触发事件，事件发起组件的所有祖先组件都会依次接收到emit事件
    //
    // 子组件定义的events事件，可以在父组件中通过$broadcast进行触发
    // 父组件通过$broadcast派发事件给子组件，所有子组件都会收到此广播事件
    //
    // 组件之间的通信可以通过$invoke进行触发
    // 调用子组件的方法：this.$invoke('ComoponentName', 'MethodName', 'sendData')
    // 调用自己的方法：this.$invoke('./', 'MethodName', 'sendData')
    // 调用父组件的方法：this.$invoke('../', 'MethodName', 'sendData')
    // 调用兄弟组件的方法：this.$invoke('../ComoponentName', 'MethodName', 'sendData')
    // 调用根页面的方法(this.$root)：this.$invoke('/', 'MethodName', 'sendData')
    events = {
      onParentEvent(info, evt) {
        console.log('events-onParentEvent', info, evt)
      }
    }

    // page生命周期：页面加载时触发
    // 一个页面只会调用一次
    onLoad(query) {
      console.log('index onLoad')

      // 加载页面数据
      this.loadPageData()
    }

    // page生命周期：页面显示/切入前台时触发
    onShow() {
      console.log('index onShow')
    }

    // page生命周期：页面初次渲染完成时触发
    // 一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。
    onReady() {
      console.log('index onReady')
    }

    // page生命周期：页面隐藏/切入后台时触发
    // 如 navigateTo 或底部 tab 切换到其他页面，小程序切入后台等。
    onHide() {
      console.log('index onHide')
    }

    // page生命周期：页面卸载时触发
    // 如redirectTo或navigateBack到其他页面时
    onUnload() {
      console.log('index onUnload')
    }

    // 自定义方法放在外层
    loadPageData() {
      console.log('index loadPageData')
    }
  }
</script>

<style lang="less">
  .userinfo {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .userinfo-avatar {
    width: 80rpx;
    height: 80rpx;
    border-radius: 50%;
  }

  .userinfo-nickname {
    color: #aaa;
  }

  .group-wrap {
    width: 100%;
    box-sizing: border-box;
    margin-top: 20rpx;
    text-align: left;
    font-size: 24rpx;
    padding: 20rpx 30rpx;
    border: 1px solid #f1f1f1;
  }
  .group-title {
    display: flex;
    justify-content: space-between;
    padding-bottom: 20rpx;
    font-size: 14px;
    font-weight: bold;
  }
  .group-content {
    padding: 15rpx;
  }
</style>
